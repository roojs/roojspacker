/* roojspacker-1.0.h generated by valac 0.32.0, the Vala compiler, do not modify */


#ifndef __ROOJSPACKER_1_0_H__
#define __ROOJSPACKER_1_0_H__

#include <glib.h>
#include <glib-object.h>
#include <gee.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define JSDOC_TYPE_TOKEN_STREAM (jsdoc_token_stream_get_type ())
#define JSDOC_TOKEN_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_TOKEN_STREAM, JSDOCTokenStream))
#define JSDOC_TOKEN_STREAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_TOKEN_STREAM, JSDOCTokenStreamClass))
#define JSDOC_IS_TOKEN_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_TOKEN_STREAM))
#define JSDOC_IS_TOKEN_STREAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_TOKEN_STREAM))
#define JSDOC_TOKEN_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_TOKEN_STREAM, JSDOCTokenStreamClass))

typedef struct _JSDOCTokenStream JSDOCTokenStream;
typedef struct _JSDOCTokenStreamClass JSDOCTokenStreamClass;
typedef struct _JSDOCTokenStreamPrivate JSDOCTokenStreamPrivate;

#define JSDOC_TYPE_TOKEN (jsdoc_token_get_type ())
#define JSDOC_TOKEN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_TOKEN, JSDOCToken))
#define JSDOC_TOKEN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_TOKEN, JSDOCTokenClass))
#define JSDOC_IS_TOKEN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_TOKEN))
#define JSDOC_IS_TOKEN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_TOKEN))
#define JSDOC_TOKEN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_TOKEN, JSDOCTokenClass))

typedef struct _JSDOCToken JSDOCToken;
typedef struct _JSDOCTokenClass JSDOCTokenClass;

#define JSDOC_TYPE_COLLAPSE (jsdoc_collapse_get_type ())
#define JSDOC_COLLAPSE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_COLLAPSE, JSDOCCollapse))
#define JSDOC_COLLAPSE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_COLLAPSE, JSDOCCollapseClass))
#define JSDOC_IS_COLLAPSE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_COLLAPSE))
#define JSDOC_IS_COLLAPSE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_COLLAPSE))
#define JSDOC_COLLAPSE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_COLLAPSE, JSDOCCollapseClass))

typedef struct _JSDOCCollapse JSDOCCollapse;
typedef struct _JSDOCCollapseClass JSDOCCollapseClass;
typedef struct _JSDOCCollapsePrivate JSDOCCollapsePrivate;

#define JSDOC_TYPE_PACKER (jsdoc_packer_get_type ())
#define JSDOC_PACKER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_PACKER, JSDOCPacker))
#define JSDOC_PACKER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_PACKER, JSDOCPackerClass))
#define JSDOC_IS_PACKER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_PACKER))
#define JSDOC_IS_PACKER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_PACKER))
#define JSDOC_PACKER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_PACKER, JSDOCPackerClass))

typedef struct _JSDOCPacker JSDOCPacker;
typedef struct _JSDOCPackerClass JSDOCPackerClass;

#define JSDOC_TYPE_IDENTIFIER (jsdoc_identifier_get_type ())
#define JSDOC_IDENTIFIER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_IDENTIFIER, JSDOCIdentifier))
#define JSDOC_IDENTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_IDENTIFIER, JSDOCIdentifierClass))
#define JSDOC_IS_IDENTIFIER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_IDENTIFIER))
#define JSDOC_IS_IDENTIFIER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_IDENTIFIER))
#define JSDOC_IDENTIFIER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_IDENTIFIER, JSDOCIdentifierClass))

typedef struct _JSDOCIdentifier JSDOCIdentifier;
typedef struct _JSDOCIdentifierClass JSDOCIdentifierClass;
typedef struct _JSDOCIdentifierPrivate JSDOCIdentifierPrivate;

#define JSDOC_TYPE_SCOPE (jsdoc_scope_get_type ())
#define JSDOC_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_SCOPE, JSDOCScope))
#define JSDOC_SCOPE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_SCOPE, JSDOCScopeClass))
#define JSDOC_IS_SCOPE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_SCOPE))
#define JSDOC_IS_SCOPE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_SCOPE))
#define JSDOC_SCOPE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_SCOPE, JSDOCScopeClass))

typedef struct _JSDOCScope JSDOCScope;
typedef struct _JSDOCScopeClass JSDOCScopeClass;

#define JSDOC_TYPE_LANGCLASS (jsdoc_langclass_get_type ())
#define JSDOC_LANGCLASS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_LANGCLASS, JSDOCLang_Class))
#define JSDOC_LANGCLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_LANGCLASS, JSDOCLang_ClassClass))
#define JSDOC_IS_LANGCLASS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_LANGCLASS))
#define JSDOC_IS_LANGCLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_LANGCLASS))
#define JSDOC_LANGCLASS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_LANGCLASS, JSDOCLang_ClassClass))

typedef struct _JSDOCLang_Class JSDOCLang_Class;
typedef struct _JSDOCLang_ClassClass JSDOCLang_ClassClass;
typedef struct _JSDOCLang_ClassPrivate JSDOCLang_ClassPrivate;

#define JSDOC_TYPE_TOKEN_NAME (jsdoc_token_name_get_type ())
typedef struct _JSDOCPackerPrivate JSDOCPackerPrivate;

#define JSDOC_TYPE_SCOPE_PARSER_MODE (jsdoc_scope_parser_mode_get_type ())

#define JSDOC_TYPE_SCOPE_PARSER (jsdoc_scope_parser_get_type ())
#define JSDOC_SCOPE_PARSER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_SCOPE_PARSER, JSDOCScopeParser))
#define JSDOC_SCOPE_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_SCOPE_PARSER, JSDOCScopeParserClass))
#define JSDOC_IS_SCOPE_PARSER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_SCOPE_PARSER))
#define JSDOC_IS_SCOPE_PARSER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_SCOPE_PARSER))
#define JSDOC_SCOPE_PARSER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_SCOPE_PARSER, JSDOCScopeParserClass))

typedef struct _JSDOCScopeParser JSDOCScopeParser;
typedef struct _JSDOCScopeParserClass JSDOCScopeParserClass;
typedef struct _JSDOCScopeParserPrivate JSDOCScopeParserPrivate;
typedef struct _JSDOCScopePrivate JSDOCScopePrivate;

#define JSDOC_TYPE_TEXT_STREAM_CHAR (jsdoc_text_stream_char_get_type ())
#define JSDOC_TEXT_STREAM_CHAR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_TEXT_STREAM_CHAR, JSDOCTextStreamChar))
#define JSDOC_TEXT_STREAM_CHAR_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_TEXT_STREAM_CHAR, JSDOCTextStreamCharClass))
#define JSDOC_IS_TEXT_STREAM_CHAR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_TEXT_STREAM_CHAR))
#define JSDOC_IS_TEXT_STREAM_CHAR_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_TEXT_STREAM_CHAR))
#define JSDOC_TEXT_STREAM_CHAR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_TEXT_STREAM_CHAR, JSDOCTextStreamCharClass))

typedef struct _JSDOCTextStreamChar JSDOCTextStreamChar;
typedef struct _JSDOCTextStreamCharClass JSDOCTextStreamCharClass;
typedef struct _JSDOCTextStreamCharPrivate JSDOCTextStreamCharPrivate;

#define JSDOC_TYPE_TEXT_STREAM (jsdoc_text_stream_get_type ())
#define JSDOC_TEXT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_TEXT_STREAM, JSDOCTextStream))
#define JSDOC_TEXT_STREAM_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_TEXT_STREAM, JSDOCTextStreamClass))
#define JSDOC_IS_TEXT_STREAM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_TEXT_STREAM))
#define JSDOC_IS_TEXT_STREAM_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_TEXT_STREAM))
#define JSDOC_TEXT_STREAM_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_TEXT_STREAM, JSDOCTextStreamClass))

typedef struct _JSDOCTextStream JSDOCTextStream;
typedef struct _JSDOCTextStreamClass JSDOCTextStreamClass;
typedef struct _JSDOCTextStreamPrivate JSDOCTextStreamPrivate;

#define JSDOC_TYPE_TOKEN_ARRAY (jsdoc_token_array_get_type ())
#define JSDOC_TOKEN_ARRAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_TOKEN_ARRAY, JSDOCTokenArray))
#define JSDOC_TOKEN_ARRAY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_TOKEN_ARRAY, JSDOCTokenArrayClass))
#define JSDOC_IS_TOKEN_ARRAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_TOKEN_ARRAY))
#define JSDOC_IS_TOKEN_ARRAY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_TOKEN_ARRAY))
#define JSDOC_TOKEN_ARRAY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_TOKEN_ARRAY, JSDOCTokenArrayClass))

typedef struct _JSDOCTokenArray JSDOCTokenArray;
typedef struct _JSDOCTokenArrayClass JSDOCTokenArrayClass;
typedef struct _JSDOCTokenArrayPrivate JSDOCTokenArrayPrivate;

#define JSDOC_TYPE_TOKEN_READER (jsdoc_token_reader_get_type ())
#define JSDOC_TOKEN_READER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_TOKEN_READER, JSDOCTokenReader))
#define JSDOC_TOKEN_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_TOKEN_READER, JSDOCTokenReaderClass))
#define JSDOC_IS_TOKEN_READER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_TOKEN_READER))
#define JSDOC_IS_TOKEN_READER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_TOKEN_READER))
#define JSDOC_TOKEN_READER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_TOKEN_READER, JSDOCTokenReaderClass))

typedef struct _JSDOCTokenReader JSDOCTokenReader;
typedef struct _JSDOCTokenReaderClass JSDOCTokenReaderClass;
typedef struct _JSDOCTokenReaderPrivate JSDOCTokenReaderPrivate;

#define JSDOC_TYPE_TOKEN_TYPE (jsdoc_token_type_get_type ())

#define JSDOC_TYPE_TOKEN_KEY_MAP (jsdoc_token_key_map_get_type ())
#define JSDOC_TOKEN_KEY_MAP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), JSDOC_TYPE_TOKEN_KEY_MAP, JSDOCTokenKeyMap))
#define JSDOC_TOKEN_KEY_MAP_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), JSDOC_TYPE_TOKEN_KEY_MAP, JSDOCTokenKeyMapClass))
#define JSDOC_IS_TOKEN_KEY_MAP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), JSDOC_TYPE_TOKEN_KEY_MAP))
#define JSDOC_IS_TOKEN_KEY_MAP_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), JSDOC_TYPE_TOKEN_KEY_MAP))
#define JSDOC_TOKEN_KEY_MAP_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), JSDOC_TYPE_TOKEN_KEY_MAP, JSDOCTokenKeyMapClass))

typedef struct _JSDOCTokenKeyMap JSDOCTokenKeyMap;
typedef struct _JSDOCTokenKeyMapClass JSDOCTokenKeyMapClass;
typedef struct _JSDOCTokenKeyMapPrivate JSDOCTokenKeyMapPrivate;
typedef struct _JSDOCTokenPrivate JSDOCTokenPrivate;

struct _JSDOCTokenStream {
	GObject parent_instance;
	JSDOCTokenStreamPrivate * priv;
	GeeArrayList* tokens;
	gint cursor;
};

struct _JSDOCTokenStreamClass {
	GObjectClass parent_class;
};

struct _JSDOCCollapse {
	JSDOCTokenStream parent_instance;
	JSDOCCollapsePrivate * priv;
};

struct _JSDOCCollapseClass {
	JSDOCTokenStreamClass parent_class;
};

typedef enum  {
	JSDOC_COMPRESS_WHITE_ERROR_BRACE
} JSDOCCompressWhiteError;
#define JSDOC_COMPRESS_WHITE_ERROR jsdoc_compress_white_error_quark ()
struct _JSDOCIdentifier {
	GObject parent_instance;
	JSDOCIdentifierPrivate * priv;
	gchar* name;
	gint refcount;
	gchar* mungedValue;
	JSDOCScope* scope;
	gboolean toMunge;
};

struct _JSDOCIdentifierClass {
	GObjectClass parent_class;
};

typedef enum  {
	JSDOC_LANG_ERROR_ArgumentError
} JSDOCLangError;
#define JSDOC_LANG_ERROR jsdoc_lang_error_quark ()
struct _JSDOCLang_Class {
	GObject parent_instance;
	JSDOCLang_ClassPrivate * priv;
};

struct _JSDOCLang_ClassClass {
	GObjectClass parent_class;
};

typedef enum  {
	JSDOC_TOKEN_NAME_UNKNOWN_TOKEN,
	JSDOC_TOKEN_NAME_BREAK,
	JSDOC_TOKEN_NAME_CASE,
	JSDOC_TOKEN_NAME_CATCH,
	JSDOC_TOKEN_NAME_CONST,
	JSDOC_TOKEN_NAME_CONTINUE,
	JSDOC_TOKEN_NAME_DEFAULT,
	JSDOC_TOKEN_NAME_DELETE,
	JSDOC_TOKEN_NAME_DO,
	JSDOC_TOKEN_NAME_ELSE,
	JSDOC_TOKEN_NAME_FALSE,
	JSDOC_TOKEN_NAME_FINALLY,
	JSDOC_TOKEN_NAME_FOR,
	JSDOC_TOKEN_NAME_FUNCTION,
	JSDOC_TOKEN_NAME_IF,
	JSDOC_TOKEN_NAME_IN,
	JSDOC_TOKEN_NAME_INSTANCEOF,
	JSDOC_TOKEN_NAME_NEW,
	JSDOC_TOKEN_NAME_NULL,
	JSDOC_TOKEN_NAME_RETURN,
	JSDOC_TOKEN_NAME_SWITCH,
	JSDOC_TOKEN_NAME_THIS,
	JSDOC_TOKEN_NAME_THROW,
	JSDOC_TOKEN_NAME_TRUE,
	JSDOC_TOKEN_NAME_TRY,
	JSDOC_TOKEN_NAME_TYPEOF,
	JSDOC_TOKEN_NAME_VOID,
	JSDOC_TOKEN_NAME_WHILE,
	JSDOC_TOKEN_NAME_WITH,
	JSDOC_TOKEN_NAME_VAR,
	JSDOC_TOKEN_NAME_EVAL,
	JSDOC_TOKEN_NAME_NAME,
	JSDOC_TOKEN_NAME_MULTI_LINE_COMM,
	JSDOC_TOKEN_NAME_JSDOC,
	JSDOC_TOKEN_NAME_SINGLE_LINE_COMM,
	JSDOC_TOKEN_NAME_SEMICOLON,
	JSDOC_TOKEN_NAME_COMMA,
	JSDOC_TOKEN_NAME_HOOK,
	JSDOC_TOKEN_NAME_COLON,
	JSDOC_TOKEN_NAME_OR,
	JSDOC_TOKEN_NAME_AND,
	JSDOC_TOKEN_NAME_BITWISE_OR,
	JSDOC_TOKEN_NAME_BITWISE_XOR,
	JSDOC_TOKEN_NAME_BITWISE_AND,
	JSDOC_TOKEN_NAME_STRICT_EQ,
	JSDOC_TOKEN_NAME_EQ,
	JSDOC_TOKEN_NAME_ASSIGN,
	JSDOC_TOKEN_NAME_STRICT_NE,
	JSDOC_TOKEN_NAME_NE,
	JSDOC_TOKEN_NAME_LSH,
	JSDOC_TOKEN_NAME_LE,
	JSDOC_TOKEN_NAME_LT,
	JSDOC_TOKEN_NAME_URSH,
	JSDOC_TOKEN_NAME_RSH,
	JSDOC_TOKEN_NAME_GE,
	JSDOC_TOKEN_NAME_GT,
	JSDOC_TOKEN_NAME_INCREMENT,
	JSDOC_TOKEN_NAME_DECREMENT,
	JSDOC_TOKEN_NAME_PLUS,
	JSDOC_TOKEN_NAME_MINUS,
	JSDOC_TOKEN_NAME_MUL,
	JSDOC_TOKEN_NAME_DIV,
	JSDOC_TOKEN_NAME_MOD,
	JSDOC_TOKEN_NAME_NOT,
	JSDOC_TOKEN_NAME_BITWISE_NOT,
	JSDOC_TOKEN_NAME_DOT,
	JSDOC_TOKEN_NAME_LEFT_BRACE,
	JSDOC_TOKEN_NAME_RIGHT_BRACE,
	JSDOC_TOKEN_NAME_LEFT_CURLY,
	JSDOC_TOKEN_NAME_RIGHT_CURLY,
	JSDOC_TOKEN_NAME_LEFT_PAREN,
	JSDOC_TOKEN_NAME_RIGHT_PAREN,
	JSDOC_TOKEN_NAME_SPACE,
	JSDOC_TOKEN_NAME_NEWLINE,
	JSDOC_TOKEN_NAME_DOUBLE_QUOTE,
	JSDOC_TOKEN_NAME_SINGLE_QUOTE,
	JSDOC_TOKEN_NAME_OCTAL,
	JSDOC_TOKEN_NAME_DECIMAL,
	JSDOC_TOKEN_NAME_HEX_DEC,
	JSDOC_TOKEN_NAME_REGX,
	JSDOC_TOKEN_NAME_START_OF_STREAM,
	JSDOC_TOKEN_NAME_END_OF_STREAM,
	JSDOC_TOKEN_NAME_UNKNOWN
} JSDOCTokenName;

typedef enum  {
	JSDOC_PACKER_ERROR_ArgumentError
} JSDOCPackerError;
#define JSDOC_PACKER_ERROR jsdoc_packer_error_quark ()
struct _JSDOCPacker {
	GObject parent_instance;
	JSDOCPackerPrivate * priv;
	gchar* tmpDir;
	gboolean cleanup;
	gboolean keepWhite;
	gboolean skipScope;
	gboolean dumpTokens;
	gchar* activeFile;
	gchar* baseDir;
	gchar* outstr;
};

struct _JSDOCPackerClass {
	GObjectClass parent_class;
};

typedef enum  {
	JSDOC_TOKEN_READER_ERROR_Syntax
} JSDOCTokenReaderError;
#define JSDOC_TOKEN_READER_ERROR jsdoc_token_reader_error_quark ()
typedef enum  {
	JSDOC_SCOPE_PARSER_ERROR_Syntax
} JSDOCScopeParserError;
#define JSDOC_SCOPE_PARSER_ERROR jsdoc_scope_parser_error_quark ()
typedef enum  {
	JSDOC_SCOPE_PARSER_MODE_BUILDING_SYMBOL_TREE,
	JSDOC_SCOPE_PARSER_MODE_PASS2_SYMBOL_TREE
} JSDOCScopeParserMode;

struct _JSDOCScopeParser {
	GObject parent_instance;
	JSDOCScopeParserPrivate * priv;
};

struct _JSDOCScopeParserClass {
	GObjectClass parent_class;
};

struct _JSDOCScope {
	GObject parent_instance;
	JSDOCScopePrivate * priv;
	JSDOCScope* parent;
	GeeArrayList* subScopes;
};

struct _JSDOCScopeClass {
	GObjectClass parent_class;
};

struct _JSDOCTextStreamChar {
	GObject parent_instance;
	JSDOCTextStreamCharPrivate * priv;
	gchar c;
	gboolean eof;
};

struct _JSDOCTextStreamCharClass {
	GObjectClass parent_class;
};

struct _JSDOCTextStream {
	GObject parent_instance;
	JSDOCTextStreamPrivate * priv;
};

struct _JSDOCTextStreamClass {
	GObjectClass parent_class;
};

struct _JSDOCTokenArray {
	GObject parent_instance;
	JSDOCTokenArrayPrivate * priv;
	GeeArrayList* tokens;
};

struct _JSDOCTokenArrayClass {
	GObjectClass parent_class;
};

typedef enum  {
	JSDOC_TOKENREADER_ERROR_ArgumentError,
	JSDOC_TOKENREADER_ERROR_SyntaxError
} JSDOCTokenReader_Error;
#define JSDOC_TOKENREADER_ERROR jsdoc_tokenreader_error_quark ()
struct _JSDOCTokenReader {
	GObject parent_instance;
	JSDOCTokenReaderPrivate * priv;
	gboolean collapseWhite;
	gboolean keepDocs;
	gboolean keepWhite;
	gboolean keepComments;
	gboolean sepIdents;
	gchar* filename;
	gboolean ignoreBadGrammer;
};

struct _JSDOCTokenReaderClass {
	GObjectClass parent_class;
};

typedef enum  {
	JSDOC_TOKEN_STREAM_ERROR_ArgumentError
} JSDOCTokenStreamError;
#define JSDOC_TOKEN_STREAM_ERROR jsdoc_token_stream_error_quark ()
typedef enum  {
	JSDOC_TOKEN_TYPE_TOKN,
	JSDOC_TOKEN_TYPE_KEYW,
	JSDOC_TOKEN_TYPE_NAME,
	JSDOC_TOKEN_TYPE_COMM,
	JSDOC_TOKEN_TYPE_PUNC,
	JSDOC_TOKEN_TYPE_WHIT,
	JSDOC_TOKEN_TYPE_STRN,
	JSDOC_TOKEN_TYPE_NUMB,
	JSDOC_TOKEN_TYPE_REGX,
	JSDOC_TOKEN_TYPE_VOID
} JSDOCTokenType;

struct _JSDOCTokenKeyMap {
	GObject parent_instance;
	JSDOCTokenKeyMapPrivate * priv;
	JSDOCToken* key;
	GeeArrayList* vals;
};

struct _JSDOCTokenKeyMapClass {
	GObjectClass parent_class;
};

struct _JSDOCToken {
	GObject parent_instance;
	JSDOCTokenPrivate * priv;
	gint id;
	gchar* data;
	JSDOCTokenType type;
	JSDOCTokenName name;
	gint line;
	gchar* prefix;
	gchar* outData;
	JSDOCIdentifier* identifier;
	GeeArrayList* items;
	GeeHashMap* props;
	GeeArrayList* keyseq;
};

struct _JSDOCTokenClass {
	GObjectClass parent_class;
};


GType jsdoc_token_stream_get_type (void) G_GNUC_CONST;
GType jsdoc_token_get_type (void) G_GNUC_CONST;
GType jsdoc_collapse_get_type (void) G_GNUC_CONST;
JSDOCCollapse* jsdoc_collapse_new (GeeArrayList* tokens);
JSDOCCollapse* jsdoc_collapse_construct (GType object_type, GeeArrayList* tokens);
GQuark jsdoc_compress_white_error_quark (void);
GType jsdoc_packer_get_type (void) G_GNUC_CONST;
gchar* jsdoc_CompressWhite (JSDOCTokenStream* ts, JSDOCPacker* packer, gboolean keepWhite);
GType jsdoc_identifier_get_type (void) G_GNUC_CONST;
GType jsdoc_scope_get_type (void) G_GNUC_CONST;
JSDOCIdentifier* jsdoc_identifier_new (const gchar* name, JSDOCScope* scope);
JSDOCIdentifier* jsdoc_identifier_construct (GType object_type, const gchar* name, JSDOCScope* scope);
GQuark jsdoc_lang_error_quark (void);
GType jsdoc_langclass_get_type (void) G_GNUC_CONST;
extern JSDOCLang_Class* jsdoc_Lang;
JSDOCLang_Class* jsdoc_langclass_new (void);
JSDOCLang_Class* jsdoc_langclass_construct (GType object_type);
gboolean jsdoc_langclass_isBuiltin (JSDOCLang_Class* self, const gchar* name);
gchar* jsdoc_langclass_whitespace (JSDOCLang_Class* self, const gchar* ch);
gchar* jsdoc_langclass_newline (JSDOCLang_Class* self, const gchar* ch);
GType jsdoc_token_name_get_type (void) G_GNUC_CONST;
JSDOCTokenName jsdoc_langclass_keyword (JSDOCLang_Class* self, const gchar* word, GError** error);
JSDOCTokenName* jsdoc_langclass_matching (JSDOCLang_Class* self, JSDOCTokenName name, GError** error);
gboolean jsdoc_langclass_isKeyword (JSDOCLang_Class* self, const gchar* word);
JSDOCTokenName jsdoc_langclass_puncFirstString (JSDOCLang_Class* self, gchar ch);
JSDOCTokenName jsdoc_langclass_puncString (JSDOCLang_Class* self, const gchar* ch);
gboolean jsdoc_langclass_isNumber (JSDOCLang_Class* self, const gchar* str);
gboolean jsdoc_langclass_isHexDec (JSDOCLang_Class* self, const gchar* str);
gboolean jsdoc_langclass_isWordString (JSDOCLang_Class* self, const gchar* str);
gboolean jsdoc_langclass_isWordChar (JSDOCLang_Class* self, gchar c);
gboolean jsdoc_langclass_isSpace (JSDOCLang_Class* self, const gchar* str);
gboolean jsdoc_langclass_isSpaceC (JSDOCLang_Class* self, gchar str);
gboolean jsdoc_langclass_isNewline (JSDOCLang_Class* self, const gchar* str);
gboolean jsdoc_langclass_isNewlineC (JSDOCLang_Class* self, gchar str);
gboolean jsdoc_langclass_isBoolean (JSDOCLang_Class* self, const gchar* str);
GQuark jsdoc_packer_error_quark (void);
JSDOCPacker* jsdoc_packer_new (void);
JSDOCPacker* jsdoc_packer_construct (GType object_type);
void jsdoc_packer_loadSourceIndexes (JSDOCPacker* self, GeeArrayList* indexes);
void jsdoc_packer_loadFiles (JSDOCPacker* self, gchar** fs, int fs_length1);
void jsdoc_packer_loadFile (JSDOCPacker* self, const gchar* f);
GQuark jsdoc_token_reader_error_quark (void);
GQuark jsdoc_scope_parser_error_quark (void);
gchar* jsdoc_packer_pack (JSDOCPacker* self, const gchar* target, const gchar* targetDebug, GError** error);
void jsdoc_packer_loadSourceIndex (JSDOCPacker* self, const gchar* in_srcfile);
gchar* jsdoc_packer_md5 (JSDOCPacker* self, const gchar* str);
GType jsdoc_scope_parser_mode_get_type (void) G_GNUC_CONST;
GType jsdoc_scope_parser_get_type (void) G_GNUC_CONST;
JSDOCScopeParser* jsdoc_scope_parser_new (JSDOCTokenStream* ts);
JSDOCScopeParser* jsdoc_scope_parser_construct (GType object_type, JSDOCTokenStream* ts);
void jsdoc_scope_parser_buildSymbolTree (JSDOCScopeParser* self, GError** error);
void jsdoc_scope_parser_mungeSymboltree (JSDOCScopeParser* self);
void jsdoc_scope_parser_printWarnings (JSDOCScopeParser* self);
extern gint jsdoc_Scope_gid;
extern GeeArrayList* jsdoc_scope_builtin;
extern GeeArrayList* jsdoc_scope_skips;
extern gchar** jsdoc_scope_ones;
extern gint jsdoc_scope_ones_length1;
extern gchar** jsdoc_scope_twos;
extern gint jsdoc_scope_twos_length1;
JSDOCScope* jsdoc_scope_new (gint braceN, JSDOCScope* parent, gint startTokN, JSDOCToken* token);
JSDOCScope* jsdoc_scope_construct (GType object_type, gint braceN, JSDOCScope* parent, gint startTokN, JSDOCToken* token);
void jsdoc_scope_dump (JSDOCScope* self, const gchar* indent);
JSDOCIdentifier* jsdoc_scope_declareIdentifier (JSDOCScope* self, const gchar* symbol, JSDOCToken* token);
JSDOCIdentifier* jsdoc_scope_getIdentifier (JSDOCScope* self, const gchar* symbol, JSDOCToken* token);
void jsdoc_scope_addHint (JSDOCScope* self, const gchar* varName, const gchar* varType);
void jsdoc_scope_preventMunging (JSDOCScope* self);
gchar** jsdoc_scope_getUsedSymbols (JSDOCScope* self, int* result_length1);
void jsdoc_scope_addToParentScope (JSDOCScope* self, const gchar* ident);
gboolean jsdoc_scope_isProtectedVar (JSDOCScope* self, const gchar* ident);
void jsdoc_scope_munge (JSDOCScope* self);
GType jsdoc_text_stream_char_get_type (void) G_GNUC_CONST;
JSDOCTextStreamChar* jsdoc_text_stream_char_new (gchar val, gboolean eof);
JSDOCTextStreamChar* jsdoc_text_stream_char_construct (GType object_type, gchar val, gboolean eof);
GType jsdoc_text_stream_get_type (void) G_GNUC_CONST;
JSDOCTextStream* jsdoc_text_stream_new (const gchar* text);
JSDOCTextStream* jsdoc_text_stream_construct (GType object_type, const gchar* text);
gchar* jsdoc_text_stream_lookS (JSDOCTextStream* self, gint n);
gchar jsdoc_text_stream_lookC (JSDOCTextStream* self, gint n);
gboolean jsdoc_text_stream_lookEOF (JSDOCTextStream* self, gint n);
gchar* jsdoc_text_stream_nextS (JSDOCTextStream* self, gint n);
gchar jsdoc_text_stream_nextC (JSDOCTextStream* self);
GType jsdoc_token_array_get_type (void) G_GNUC_CONST;
JSDOCTokenArray* jsdoc_token_array_new (void);
JSDOCTokenArray* jsdoc_token_array_construct (GType object_type);
JSDOCToken* jsdoc_token_array_last (JSDOCTokenArray* self);
JSDOCToken* jsdoc_token_array_lastSym (JSDOCTokenArray* self);
void jsdoc_token_array_push (JSDOCTokenArray* self, JSDOCToken* t, GError** error);
JSDOCToken* jsdoc_token_array_pop (JSDOCTokenArray* self);
JSDOCToken* jsdoc_token_array_get (JSDOCTokenArray* self, gint i);
void jsdoc_token_array_dump (JSDOCTokenArray* self);
gint jsdoc_token_array_get_length (JSDOCTokenArray* self);
GQuark jsdoc_tokenreader_error_quark (void);
GType jsdoc_token_reader_get_type (void) G_GNUC_CONST;
JSDOCTokenArray* jsdoc_token_reader_tokenize (JSDOCTokenReader* self, JSDOCTextStream* stream, GError** error);
gint jsdoc_token_reader_findPuncToken (JSDOCTokenReader* self, JSDOCTokenArray* tokens, const gchar* data, gint n);
JSDOCToken* jsdoc_token_reader_lastSym (JSDOCTokenReader* self, JSDOCTokenArray* tokens, gint n);
gboolean jsdoc_token_reader_read_word (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_punc (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_space (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_newline (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_mlcomment (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_slcomment (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_dbquote (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_snquote (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_numb (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_hex (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
gboolean jsdoc_token_reader_read_regx (JSDOCTokenReader* self, JSDOCTextStream* stream, JSDOCTokenArray* tokens, GError** error);
JSDOCTokenReader* jsdoc_token_reader_new (void);
JSDOCTokenReader* jsdoc_token_reader_construct (GType object_type);
GQuark jsdoc_token_stream_error_quark (void);
JSDOCTokenStream* jsdoc_token_stream_new (GeeArrayList* tokens);
JSDOCTokenStream* jsdoc_token_stream_construct (GType object_type, GeeArrayList* tokens);
GeeArrayList* jsdoc_token_stream_toArray (JSDOCTokenStream* self);
void jsdoc_token_stream_rewind (JSDOCTokenStream* self);
JSDOCToken* jsdoc_token_stream_look (JSDOCTokenStream* self, gint n, gboolean considerWhitespace);
JSDOCToken* jsdoc_token_stream_lookAny (JSDOCTokenStream* self, gint n);
gint jsdoc_token_stream_lookFor (JSDOCTokenStream* self, const gchar* data);
JSDOCToken* jsdoc_token_stream_lookTok (JSDOCTokenStream* self, gint n);
JSDOCToken* jsdoc_token_stream_next (JSDOCTokenStream* self);
GeeArrayList* jsdoc_token_stream_nextM (JSDOCTokenStream* self, gint howMany, GError** error);
JSDOCToken* jsdoc_token_stream_nextTok (JSDOCTokenStream* self);
JSDOCToken* jsdoc_token_stream_nextNonSpace (JSDOCTokenStream* self);
GeeArrayList* jsdoc_token_stream_balance (JSDOCTokenStream* self, JSDOCTokenName in_start, GError** error);
JSDOCToken* jsdoc_token_stream_getMatchingTokenEnd (JSDOCTokenStream* self, JSDOCTokenName end);
JSDOCToken* jsdoc_token_stream_getMatchingToken (JSDOCTokenStream* self, JSDOCTokenName start, gint depth);
GeeArrayList* jsdoc_token_stream_remaining (JSDOCTokenStream* self);
void jsdoc_token_stream_printRange (JSDOCTokenStream* self, gint start, gint end);
void jsdoc_token_stream_dump (JSDOCTokenStream* self, gint start, gint end);
void jsdoc_token_stream_dumpAll (JSDOCTokenStream* self, const gchar* indent);
void jsdoc_token_stream_dumpAllFlat (JSDOCTokenStream* self);
GType jsdoc_token_type_get_type (void) G_GNUC_CONST;
GType jsdoc_token_key_map_get_type (void) G_GNUC_CONST;
JSDOCTokenKeyMap* jsdoc_token_key_map_new (void);
JSDOCTokenKeyMap* jsdoc_token_key_map_construct (GType object_type);
JSDOCToken* jsdoc_token_new (const gchar* data, JSDOCTokenType type, JSDOCTokenName name, gint line);
JSDOCToken* jsdoc_token_construct (GType object_type, const gchar* data, JSDOCTokenType type, JSDOCTokenName name, gint line);
gchar* jsdoc_token_asString (JSDOCToken* self);
void jsdoc_token_dump (JSDOCToken* self, const gchar* indent);
gchar* jsdoc_token_toRaw (JSDOCToken* self, gint lvl);
gboolean jsdoc_token_isName (JSDOCToken* self, JSDOCTokenName what);
gboolean jsdoc_token_isType (JSDOCToken* self, JSDOCTokenType what);


G_END_DECLS

#endif
